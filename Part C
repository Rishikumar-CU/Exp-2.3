import java.util.*;
import java.util.stream.Collectors;

class Product {
    private String name;
    private double price;
    private String category;

    public Product(String name, double price, String category) {
        this.name = name;
        this.price = price;
        this.category = category;
    }

    public String getName() { return name; }
    public double getPrice() { return price; }
    public String getCategory() { return category; }

    @Override
    public String toString() {
        return String.format("%s (%.2f) - %s", name, price, category);
    }
}

public class ProductStreamOperations {
    public static void main(String[] args) {
        List<Product> products = Arrays.asList(
            new Product("Laptop", 85000, "Electronics"),
            new Product("Smartphone", 55000, "Electronics"),
            new Product("Headphones", 3000, "Electronics"),
            new Product("Shirt", 1500, "Clothing"),
            new Product("Jeans", 2500, "Clothing"),
            new Product("Jacket", 5000, "Clothing"),
            new Product("Refrigerator", 45000, "Appliances"),
            new Product("Microwave", 12000, "Appliances"),
            new Product("Washing Machine", 35000, "Appliances")
        );

        //  Group products by category
        Map<String, List<Product>> productsByCategory = products.stream()
                .collect(Collectors.groupingBy(Product::getCategory));

        System.out.println("=== Products Grouped by Category ===");
        productsByCategory.forEach((category, prodList) -> {
            System.out.println(category + ":");
            prodList.forEach(p -> System.out.println("  " + p));
        });

        // Find the most expensive product in each category
        Map<String, Optional<Product>> maxPriceByCategory = products.stream()
                .collect(Collectors.groupingBy(
                        Product::getCategory,
                        Collectors.maxBy(Comparator.comparingDouble(Product::getPrice))
                ));

        System.out.println("\n=== Most Expensive Product in Each Category ===");
        maxPriceByCategory.forEach((category, productOpt) ->
                System.out.println(category + ": " + productOpt.orElse(null))
        );

        // Calculate the average price of all products
        double averagePrice = products.stream()
                .collect(Collectors.averagingDouble(Product::getPrice));

        System.out.println("\n=== Average Price of All Products ===");
        System.out.printf("â‚¹%.2f%n", averagePrice);
    }
}
